buildscript {
  extra.apply {
    set("javafx_version", 21)
  }
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath("org.openjfx:javafx-plugin:0.1.0")
    classpath("org.gradle.kotlin:gradle-kotlin-dsl-plugins:4.2.1")
  }
}
apply(plugin = "org.openjfx.javafxplugin")

plugins {
  id("java")
  id("application")
  id("org.gradle.kotlin.kotlin-dsl") version "4.2.1"
  id("org.javamodularity.moduleplugin") version "1.8.12"
  id("org.openjfx.javafxplugin") version "0.1.0"
  id("org.beryx.jlink") version "2.25.0"
}

group "com.example"
version "1.0-SNAPSHOT"

repositories {
  mavenCentral()
  gradlePluginPortal()
}

java {
  sourceCompatibility = org.gradle.api.JavaVersion.VERSION_21
  targetCompatibility = org.gradle.api.JavaVersion.VERSION_21
  modularity.inferModulePath.set(false)
}
tasks.withType<JavaCompile> {
  options.encoding = "UTF-8"
}

javafx {
  version = "${extra("javafx_version")}"
  application {
    mainClass.set("org.jens_mueller.jtcemu.platform.fx.Launcher")
    applicationName = "JTCemuFX"
  }
  modules("javafx.base","javafx.fxml","javafx.controls","javafx.graphics","javafx.web","javafx.media","javafx.swing")
}

dependencies {
  implementation(project(":JTCEMUCommon"))

  // here starts JavaFX
  compileOnly("org.openjfx:javafx-plugin:0.1.0")

  compileOnly("org.openjfx:javafx:${extra("javafx_version")}")

  compileOnly("org.openjfx:javafx-base:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-graphics:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-controls:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-fxml:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-swing:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-media:${extra("javafx_version")}")
  compileOnly("org.openjfx:javafx-web:${extra("javafx_version")}")

  testImplementation("junit:junit:4.13.1")
}

tasks.withType<Jar> {
  manifest {
    attributes["Main-Class"] = "org.jens_mueller.jtcemu.platform.fx.Launcher"
//    attributes["Class-Path"] = configurations
//            .runtimeClasspath
//            .get()
//            .joinToString(separator = " ") {  if (it.isDirectory) { it.toString() } else { zipTree(it).toString() } }
            // .duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  }
}

jlink{
  launcher {
    name = "org.jens_mueller.jtcemu.platform.fx.Launcher"
  }
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  addOptions("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages")
}