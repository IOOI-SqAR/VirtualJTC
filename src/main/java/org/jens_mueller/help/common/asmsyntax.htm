<html>
<body>
 <h1>JTCEMU-Assembler-Syntax</h1>
  <ul>
   <li>
    <a href="asmsyntax.htm#general_syntax">1. Allgemeine Syntax</a>
    <ul>
     <li>
      <a href="asmsyntax.htm#case">1.1. Gro&szlig;- und Kleinschreibung</a>
     </li>
     <li>
      <a href="asmsyntax.htm#line_syntax">1.2. Aufbau einer Assembler-Quelltextzeile</a>
     </li>
     <li>
      <a href="asmsyntax.htm#labels">1.3. Marken</a>
     </li>
     <li>
      <a href="asmsyntax.htm#comments">1.4. Kommentare</a>
     </li>
    </ul>
   </li>
   <li>
    <a href="asmsyntax.htm#cpu_instr">2. CPU-Befehle</a>
    <ul>
     <li><a href="asmsyntax.htm#reg_names">2.1. Registernamen</a></li>
    </ul>
   </li>
   <li>
    <a href="asmsyntax.htm#pseudo_inst">3. Pseudobefehle</a>
    <ul>
     <li>
      <a href="asmsyntax.htm#.align">3.1. Pseudobefehl <tt>.align</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.binclude">3.2. Pseudobefehl <tt>.binclude</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.cpu">3.3. Pseudobefehl <tt>.cpu</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.db">3.4. Pseudobefehl <tt>.db</tt></a>
      <ul>
       <li>
        <a href="asmsyntax.htm#string_literal">3.4.1. Zeichenketten</a>
       </li>
      </ul>
     </li>
     <li>
      <a href="asmsyntax.htm#.ds">3.5. Pseudobefehl <tt>.ds</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.ds.w">3.6. Pseudobefehl <tt>.ds.w</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.dw">3.7. Pseudobefehl <tt>.dw</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.end">3.8. Pseudobefehl <tt>.end</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.ent">3.9. Pseudobefehl <tt>.ent</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.equ">3.10. Pseudobefehl <tt>.equ</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.error">3.11. Pseudobefehl <tt>.error</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.include">3.12. Pseudobefehl <tt>.include</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.org">3.13. Pseudobefehl <tt>.org</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.title">3.14. Pseudobefehl <tt>.title</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.warning">3.15. Pseudobefehl <tt>.warning</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.warnoff">3.16. Pseudobefehl <tt>.warnoff</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#.warnon">3.17. Pseudobefehl <tt>.warnon</tt></a>
     </li>
    </ul>
   </li>
   <li>
    <a href="asmsyntax.htm#expr">4. Numerische Ausdr&uuml;cke</a>
    <ul>
     <li>
      <a href="asmsyntax.htm#number_literal">4.1. Zahlenliterale</a>
      <ul>
       <li><a href="asmsyntax.htm#dec_literal">4.1.1. Dezimalzahlen</a></li>
       <li>
	<a href="asmsyntax.htm#hex_literal">4.1.2. Hexdezimalzahlen</a>
       </li>
       <li><a href="asmsyntax.htm#bin_literal">4.1.3. Bin&auml;rzahlen</a></li>
       <li><a href="asmsyntax.htm#oct_literal">4.1.4. Oktalzahlen</a></li>
      </ul>
     </li>
     <li><a href="asmsyntax.htm#char_literal">4.2. Zeichenliterale</a></li>
     <li><a href="asmsyntax.htm#unary_op">4.3. Un&auml;re Operatoren</a></li>
     <li>
      <a href="asmsyntax.htm#bi_op">4.4. Operatoren mit zwei Operanden</a>
     </li>
     <li><a href="asmsyntax.htm#cur_addr">4.5. Aktuelle Adresse</a></li>
     <li>
      <a href="asmsyntax.htm#high_low">4.6. Zugriff auf h&ouml;her- bzw. niederwertiges Byte</a>
     </li>
     <li><a href="asmsyntax.htm#op_priority">4.7. Vorrangregeln</a></li>
     <li><a href="asmsyntax.htm#grammar">4.8. Grammatik</a></li>
    </ul>
   </li>
   <li>
    <a href="asmsyntax.htm#cond_asm">5. Assembler-Direktiven und bedingte Assemblierung</a>
    <ul>
     <li>
      <a href="asmsyntax.htm#$if">5.1. Assembler-Direktive <tt>$IF</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$iffalse">5.2. Assembler-Direktive <tt>$IFFALSE</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$ifdef">5.3. Assembler-Direktive <tt>$IFDEF</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$ifndef">5.4. Assembler-Direktive <tt>$IFNDEF</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$elseif">5.5. Assembler-Direktive <tt>$ELSEIF</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$else">5.6. Assembler-Direktive <tt>$ELSE</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#$endif">5.7. Assembler-Direktive <tt>$ENDIF</tt></a>
     </li>
     <li>
      <a href="asmsyntax.htm#cond_example">5.8. Beispiel f&uuml;r bedingte Assemblierung</a>
     </li>
     <li>
      <a href="asmsyntax.htm#$even">5.9. Assembler-Direktive <tt>$EVEN</tt></a>
     </li>
    </ul>
   </li>
   <li>
    <a href="asmsyntax.htm#placebo">6. Assembler-Direktiven und Pseudobefehle ohne Wirkung</a>
     </li>
   <li>
    <a href="asmsyntax.htm#literature">7. Literatur</a>
   </li>
  </ul>
 <br/>


 <h2><a name="general_syntax">1. Allgemeine Syntax</a></h2>

 <h3><a name="case">1.1. Gro&szlig;- und Kleinschreibung</a></h3>
  Der Assembler unterscheidet bei Marken die Gro&szlig;- und Kleinschreibung,
  au&szlig;er Sie haben die Assembler-Option
  <em>Gro&szlig;- und Kleinschreibung bei Marken ignorieren</em> angeklickt.
  Bei der Mnemonik, den Pseudobefehlen und den Assembler-Direktiven
  ist die Gro&szlig;-/Kleinschreibung egal.
 <br/><br/>

 <h3><a name="line_syntax">1.2. Aufbau einer Assembler-Quelltextzeile</a></h3>
  Die allgemeine Syntax einer Quelltextzeile lautet:
  <p>
   <tt>[Marke] [Befehl] [Kommentar]</tt>
  </p>
  <br/>
  In eckigen Klammern stehende Teile sind optional, d.h.,
  eine Zeile kann auch nur aus einer Marke, einem Befehl oder
  einem Kommentar bestehen oder auch leer sein.
  Vor und hinter den einzelnen Teilen k&ouml;nnen beliebig viele
  Leerzeichen und Tabulatoren stehen.
 <br/><br/>
  Eine Marke muss mit einem Doppelpunkt abgeschlossen werden.
  Anderenfalls wird sie als Befehl gewertet.
  Einzige Ausnahme ist der Pseudobefehl <em>.equ</em>,
  bei dem die Marke auch ohne Doppelpunkt angegeben werden kann.
 <br/><br/>
  Ein Befehl kann folgenden Aufbau haben:
  <ul>
   <li><tt>Mnemonik [Argument_1 [,Argument_2]]</tt></li>
   <li><tt>Pseudobefehl [Argument_1 [,Argument_2 [,...]]]</tt></li>
   <li><tt>Assembler-Direktive [Argument [Schl&uuml;sselwort]]</tt></li>
  </ul>
 <br/>

 <h3><a name="labels">1.3. Marken</a></h3>
  Marken haben einen numerischen 16-Bit-Wert und werden definiert,
  indem sie am Anfang einer Assembler-Zeile stehen
  und mit einem Doppelpunkt abgeschlossen sind oder
  der Pseudobefehl <a href="asmsyntax.htm#.equ"><tt>.equ</tt></a> folgt.
  Bei <tt>.equ</tt> erh&auml;lt die Marke den Wert
  des hinter des Befehls stehenden Ausdrucks,
  anderenfalls den Wert der aktuellen Adresse.
  Marken, die auf letzter Art und Weise angelegt werden,
  nennt man auch Adressmarken.
  Pro Quelltextzeile kann nur eine Marke definiert werden.
 <br/><br/>
  Marken k&ouml;nnen als Sprungziele oder in numerischen Ausdr&uuml;cken
  verwendet werden.
 <br/><br/>
  Marken k&ouml;nnen Buchstaben, Ziffern und den Unterstrich enthalten.
  Allerdings darf eine Ziffer nicht am Anfang der Marke stehen.
 <br/><br/>
  <b>Achtung!</b> Der Assembler legt zur Unterst&uuml;tzung der
  <a href="asmsyntax.htm#cond_asm">bedingten Assemblierung</a>
  automatisch immer die Marke <em>__JTCEMU__</em> mit dem Wert&nbsp;%FFFF
  (alle Bits gesetzt) an.
 <br/><br/>

 <h3><a name="comments">1.4. Kommentare</a></h3>
  Kommentare beginnen mit einem Semikolon, einem Ausrufezeichen
  oder zwei Schr&auml;gstrichen (zwei Slash-Zeichen)
  und gehen bis zum Ende der Quelltextzeile:
 <br/><br/>
  <tt>
   &nbsp;&nbsp;; Kommentar<br/>
   &nbsp;&nbsp;! Kommentar<br/>
   &nbsp;&nbsp;// Kommentar<br/>
  </tt>
 <br/><br/>
  Alles ab dem Ausrufezeichen, dem Semikolon oder den zwei Slashs
  bis zum Ende der Zeile wird als Kommentar gewertet
  und vom Assembler nicht ausgewertet.
  Dies gilt jedoch nicht, wenn die betreffenden Zeichen in einem
  <a href="asmsyntax.htm#char_literal">Zeichenliteral</a> oder einer
  <a href="asmsyntax.htm#string_literal">Zeichenkette</a> stehen.
  In dem Fall sind die betreffenden Zeichen Teil des Literals
  und leiten keinen Kommentar ein.
 <br/><br/>


 <h2><a name="cpu_instr">2. CPU-Befehle</a></h2>
  Die Mnemonik der Z8-CPU-Befehle sowie die Syntax der zugeh&ouml;rigen
  Argumente entspricht den Angaben in
  <a href="asmsyntax.htm#literature">[1]</a>.
 <br/><br/>

 <h3><a name="reg_names">2.1. Registernamen</a></h3>
  Arbeitsregister (Working Register) beginnen mit einem R,
  gefolgt von der Nummer&nbsp;0 bis 15 (z.B. <tt>R0</tt>).
  Arbeitsdoppelregister beginnen mit Doppel-R,
  gefolgt von einer geraden Nummer&nbsp;0 bis 14 (z.B. <tt>RR2</tt>).
 <br/><br/>
  Regul&auml;re Register (General Purpose Register, Ports und Steuerregister)
  werden mit ihrer Registernummer angesprochen.
  Die Ports (Register&nbsp;0 bis 3) und die Steuerregister
  (Register&nbsp;240 bis 255 bzw. %F0 bis %FF)
  haben zus&auml;tzlich einen Namen.
  Bei diesen Registern kann sowohl die Registernummer als auch
  der Registername verwendet werden:
 <br/><br/>
  <table border="1">
   <tr>
    <th colspan="2" valign="top">Registernummer</th>
    <th valign="top">Registername</th>
   </tr>
   <tr>
    <th valign="top">Dezimal</th>
    <th valign="top">Hexadezimal</th>
    <th></th>
   </tr>
   <tr>
    <td valign="top"><tt>0</tt></td>
    <td valign="top"><tt>%00</tt></td>
    <td valign="top"><tt>P0</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>1</tt></td>
    <td valign="top"><tt>%01</tt></td>
    <td valign="top"><tt>P1</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>2</tt></td>
    <td valign="top"><tt>%02</tt></td>
    <td valign="top"><tt>P2</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>3</tt></td>
    <td valign="top"><tt>%03</tt></td>
    <td valign="top"><tt>P3</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>240</tt></td>
    <td valign="top"><tt>%F0</tt></td>
    <td valign="top"><tt>SIO</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>241</tt></td>
    <td valign="top"><tt>%F1</tt></td>
    <td valign="top"><tt>TMR</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>242</tt></td>
    <td valign="top"><tt>%F2</tt></td>
    <td valign="top"><tt>T1</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>243</tt></td>
    <td valign="top"><tt>%F3</tt></td>
    <td valign="top"><tt>PRE1</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>244</tt></td>
    <td valign="top"><tt>%F4</tt></td>
    <td valign="top"><tt>T0</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>245</tt></td>
    <td valign="top"><tt>%F5</tt></td>
    <td valign="top"><tt>PRE0</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>246</tt></td>
    <td valign="top"><tt>%F6</tt></td>
    <td valign="top"><tt>P2M</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>247</tt></td>
    <td valign="top"><tt>%F7</tt></td>
    <td valign="top"><tt>P3M</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>248</tt></td>
    <td valign="top"><tt>%F8</tt></td>
    <td valign="top"><tt>P01M</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>249</tt></td>
    <td valign="top"><tt>%F9</tt></td>
    <td valign="top"><tt>IPR</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>250</tt></td>
    <td valign="top"><tt>%FA</tt></td>
    <td valign="top"><tt>IRQ</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>251</tt></td>
    <td valign="top"><tt>%FB</tt></td>
    <td valign="top"><tt>IMR</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>252</tt></td>
    <td valign="top"><tt>%FC</tt></td>
    <td valign="top"><tt>FLAGS</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>253</tt></td>
    <td valign="top"><tt>%FD</tt></td>
    <td valign="top"><tt>RP</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>254</tt></td>
    <td valign="top"><tt>%FE</tt></td>
    <td valign="top"><tt>SPH</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>255</tt></td>
    <td valign="top"><tt>%FF</tt></td>
    <td valign="top"><tt>SPL</tt></td>
   </tr>
  </table>
 <br/>
  Das Doppelregister f&uuml;r den externen Stack Pointer
  (254 / 255 bzw. %FE / %FF)
  tr&auml;gt den Namen&nbsp;<tt>SP</tt>.
 <br/><br/>
  Die Registernamen sind reservierte Schl&uuml;sselw&ouml;rter
  und k&ouml;nnen nicht als Marken verwendet werden.
  Die Gro&szlig;-/Kleinschreibung der Registernamen ist egal.
 <br/><br/>


 <h2><a name="pseudo_inst">3. Pseudobefehle</a></h2>
  Der Assembler versteht folgende Pseudobefehle:
 <br/><br/>
  <table border="1">
   <tr>
    <th nowrap="nowrap">Befehl</th>
    <th>Synonyme</th>
    <th nowrap="nowrap">Bedeutung</th>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.align"><tt>.align</tt></a>
    </td>
    <td valign="top"><tt>ALIGN</tt></td>
    <td valign="top">Aktuelle Adresse ausrichten</td>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.binclude"><tt>.binclude</tt></a>
    </td>
    <td valign="top"><tt>BINCLUDE</tt></td>
    <td valign="top">Einbinden einer Bin&auml;rdatei</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.cpu"><tt>.cpu</tt></a></td>
    <td valign="top"><tt>CPU</tt></td>
    <td valign="top">Angabe des Prozessortyps</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.db"><tt>.db</tt></a></td>
    <td valign="top">
     <tt>
      .byte<br/>
      .db.b<br/>
      .defb<br/>
      DB<br/>
      DB.B<br/>
      DEFB
     </tt>
    </td>
    <td valign="top">Datenbytes erzeugen</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.ds"><tt>.ds</tt></a></td>
    <td valign="top">
     <tt>
      .ds.b<br/>
      .defs<br/>
      DS<br/>
      DS.B<br/>
      DEFS
     </tt>
    </td>
    <td valign="top">Speicherbereich reservieren</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.ds.w"><tt>.ds.w</tt></a></td>
    <td valign="top"><tt>DS.W</tt></td>
    <td valign="top">
     Speicherbereich in Anzahl Datenw&ouml;rtern reservieren
    </td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.dw"><tt>.dw</tt></a></td>
    <td valign="top">
     <tt>
      .db.b<br/>
      .defb<br/>
      .word<br/>
      DB<br/>
      DB.B<br/>
      DEFB
     </tt>
    </td>
    <td valign="top">Datenbytes erzeugen</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.end"><tt>.end</tt></a></td>
    <td valign="top"><tt>END</tt></td>
    <td valign="top">Ende des Quelltextes bzw. der Quelltextdatei</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.ent"><tt>.ent</tt></a></td>
    <td valign="top">
     <tt>
      .entry<br/>
      ENT
     </tt>
    </td>
    <td valign="top">Eintrittspunkt (Startpunkt) des Programms</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.equ"><tt>.equ</tt></a></td>
    <td valign="top">
     <tt>
      .equal<br/>
      EQU
     </tt></td>
    <td valign="top">Anlegen einer Marke mit einem vorgegebenen Wert</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.error"><tt>.error</tt></a></td>
    <td valign="top">
     <tt>ERROR</tt></td>
    <td valign="top">Ausgabe eines Fehlers</td>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.include"><tt>.include</tt></a>
    </td>
    <td valign="top"><tt>INCLUDE</tt></td>
    <td valign="top">Einbinden einer Quelltextdatei</td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.org"><tt>.org</tt></a></td>
    <td valign="top"><tt>ORG</tt></td>
    <td valign="top">
     Programmz&auml;hler (Adresse) auf den angegebenen Wert setzen
    </td>
   </tr>
   <tr>
    <td valign="top"><a href="asmsyntax.htm#.title"><tt>.title</tt></a></td>
    <td valign="top"><tt>TITLE</tt></td>
    <td valign="top">Titel oder Bezeichnung des Programms</td>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.warning"><tt>.warning</tt></a>
    </td>
    <td valign="top">
     <tt>WARNING</tt></td>
    <td valign="top">Ausgabe einer Warnung</td>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.warnoff"><tt>.warnoff</tt></a>
    </td>
    <td valign="top">
     <tt>WARNOFF</tt></td>
    <td valign="top">Ausgabe von Warnungen unterdr&uuml;cken</td>
   </tr>
   <tr>
    <td valign="top">
     <a href="asmsyntax.htm#.warnon"><tt>.warnon</tt></a>
    </td>
    <td valign="top">
     <tt>WARNON</tt></td>
    <td valign="top">Ausgabe von Warnungen erm&ouml;glichen</td>
   </tr>
  </table>
 <br/>
  Anstelle des in der ersten Spalte angegebenen Befehlsnamens
  k&ouml;nnen auch uneingeschr&auml;kt die Synonyme
  in der zweiten Spalte verwendet werden.
  Die Gro&szlig;-/Kleinschreibung spielt bei den Namen der Pseudobefehle
  keine Rolle.
 <br/><br/>
  Aus Gr&uuml;nden der Kompatibilit&auml;t zu anderen Z8-Assemblern
  werden noch
  <a href="asmsyntax.htm#placebo">weitere Pseudobefehle</a>
  verstanden, die hier jedoch keine Wirkung haben.
 <br/><br/>

 <h3><a name=".align">3.1. Pseudobefehl <tt>.align</tt></a></h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>.align&nbsp;<i>&lt;Zahlenliteral&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>.align&nbsp;<i>&lt;Zahlenliteral&gt;,&lt;Ausdruck&gt;</i></tt>
 <br/><br/>
  Mit <tt>.align</tt> richtet man die aktuelle Adresse
  auf eine Zweierpotenz aus, also z.B. 2, 4, 8, 16, ...
  Entspricht die aktuelle Adresse keiner Zweierpotenz,
  werden soviele %FF-Bytes eingef&uuml;gt, bis das der Fall ist.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>&nbsp;&nbsp;.org&nbsp;%8000</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.db&nbsp;1</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.align&nbsp;%100</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;;Aktuelle Adresse ist jetzt %8100.</tt>&#10;<br/>
 <br/><br/>
  Soll mit einem anderen Byte anstatt %FF aufgef&uuml;llt werden,
  k&ouml;nnen Sie dieses als weiteres Argument angeben:
 <br/>
  <tt>&nbsp;&nbsp;.org&nbsp;%8000</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.db&nbsp;1</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.align&nbsp;4,0&nbsp;&nbsp;;Es werden 3 Nullbytes eingefuegt.</tt>&#10;<br/>
 <br/>

 <h3><a name=".binclude">3.2. Pseudobefehl <tt>.binclude</tt></a></h3>
  Der Befehl f&uuml;gt die angegebene Datei unver&auml;ndert,
  d.h. in bin&auml;rer Form, an der aktuellen Stelle
  in den erzeugten Programmcode ein.
  Der Dateiname ist in einfachen oder doppelten Hochkommas
  einzuschlie&szlig;en und kann ohne oder mit Pfad angegeben werden,
  wobei sowohl ein absoluter als auch ein relativer Pfad erlaubt sind.
  Die Pfadangabe muss den Regeln des Betriebssystems entsprechen.
  Unabh&auml;ngig davon kann aber ein relativer Pfad auch in einer
  betriebssystemunabh&auml;ngigen Form (also auch unter Windows)
  mit einem Slash&nbsp;(/) als Pfadtrennzeichen angegeben werden.
 <br/><br/>
  Beispiel mit absoluter Pfadangabe unter Linux/Unix:<br/>
  &nbsp;&nbsp;<tt>.binclude "/home/users/myuser/fonts/zeichensatz.bin"</tt>
 <br/><br/>
  Beispiel mit absoluter Pfadangabe unter Windows:<br/>
  &nbsp;&nbsp;<tt>.binclude "C:\Users\myuser\fonts\zeichensatz.bin"</tt>
 <br/><br/>
  Beispiel mit relativer und betriebssystemunabh&auml;ngiger Pfadangabe:
 <br/>
  &nbsp;&nbsp;<tt>.binclude "../fonts/zeichensatz.bin"</tt>
 <br/><br/>
  Beispiel ohne Pfadangabe:
 <br/>
  &nbsp;&nbsp;<tt>.binclude "zeichensatz.bin"</tt>
 <br/><br/>

 <h3><a name=".cpu">3.3. Pseudobefehl <tt>.cpu</tt></a></h3>
  Mit <tt>.cpu</tt> wird der Prozessortyp angegeben,
  f&uuml;r den der Assembler Programmcode erzeugen soll.
  Folgende Prozessortypen (Schl&uuml;sselw&ouml;rter)
  werden unterst&uuml;tzt:
 <br/>
  &nbsp;&nbsp;
  <tt>
   U881&nbsp;&nbsp;U882&nbsp;&nbsp;U883&nbsp;&nbsp;U884&nbsp;&nbsp;U886
   &nbsp;&nbsp;Z8
   &nbsp;&nbsp;Z8601&nbsp;&nbsp;Z8603
   &nbsp;&nbsp;Z8611&nbsp;&nbsp;Z8612&nbsp;&nbsp;Z8613
   &nbsp;&nbsp;Z8671&nbsp;
   &nbsp;Z8681&nbsp;&nbsp;Z8682
   &nbsp;Z86C04&nbsp;&nbsp;Z86C08&nbsp;&nbsp;Z86C93
   &nbsp;Z86E04&nbsp;&nbsp;Z86E08
  </tt>
 <br/><br/>
  Beispiel:
 <br/>
  &nbsp;&nbsp;<tt>.cpu Z8601</tt>
 <br/><br/>
  Die Auswirkung des Pseudobefehls ist,
  dass der Assembler nur solche CPU-Befehle und Registernummern
  zul&auml;sst, die in dem angegebenen Prozessortyp auch vorhanden sind.
  Enth&auml;lt das Assembler-Programm keinen <tt>.cpu</tt>-Befehl,
  gibt der Assembler Warnungen an den Stellen aus,
  bei denen CPU-Befehle oder Registernummern verwendet werden,
  die nicht in allen Z8-Typen vorhanden sind.
 <br/><br/>
  Mit dem Prozessortyp <tt>Z8</tt> werden alle CPU-Eigenschaften aktiviert,
  d.h., bei diesem Prozessortyp werden keine CPU-relevanten
  Warnungen oder Fehler ausgegeben.
 <br/><br/>

 <h3><a name=".db">3.4. Pseudobefehl <tt>.db</tt></a></h3>
  Mit diesem Befehl werden Datenbytes an der aktuellen Stelle
  im Programmcode erzeugt.
  Der Pseudobefehl kann beliebig viele Argumente haben,
  die durch Komma zu trennen sind.
  Ein Argument kann entweder ein
  <a href="asmsyntax.htm#expr">Numerischer Ausdruck</a> oder eine
  <a href="asmsyntax.htm#string_literal">Zeichenkette</a> sein.
 <br/><br/>
  Beispiele:
 <br/>
  <table border="0">
   <tr>
    <td valign="bottom">&nbsp;&nbsp;<tt>ABC</tt></td>
    <td valign="bottom">
     &nbsp;<tt>.equ</tt><br/>
     &nbsp;<tt>.db</tt><br/>
     &nbsp;<tt>.db</tt>
    </td>
    <td valign="bottom">
     &nbsp;<tt>12</tt><br/>
     &nbsp;<tt>3*ABC</tt><br/>
     &nbsp;<tt>"Ein Text",%0D,%0A,0</tt>
    </td>
    <td valign="bottom">
     <br/>
     &nbsp;<tt>;ein Byte mit dem Wert&nbsp;%24 (dezimal&nbsp;36)</tt><br/>
     &nbsp;<tt>;C-String</tt>
    </td>
   </tr>
  </table>
 <br/>

 <h3><a name="string_literal">3.4.1. Zeichenketten</a></h3>
  Eine Zeichenkette ist eine Aneinanderreihung von Textzeichen,
  die in einfachen oder doppelten Hochkommas eingeschlossen sind.
  Die numerischen Codes der Textzeichen m&uuml;ssen im 8-Bit-Bereich liegen.
 <br/><br/>
  Der Zeichensatz des Texteditors,
  mit dem das Assembler-Programm geschrieben wird,
  kann sich von dem des Zielsystems, d.h.,
  auf dem das &uuml;bersetzte Assembler-Programm ausgef&uuml;hrt wird,
  unterscheiden (und wird sich meistens auch unterscheiden).
  Aus diesem Grund sollten nur ASCII-Zeichen in Zeichenketten
  geschrieben werden.
  Nicht-ASCII-Zeichen lassen sich bei <tt>.db</tt>
  als separates Argument mit ihrem numerischen Wert angeben
  (siehe Beispiel weiter oben).
 <br/><br/>
  Es besteht auch die M&ouml;glichkeit, bestimmte Zeichen
  oder beliebige Zeichencodes direkt in der Zeichenkette anzugeben.
  Daf&uuml;r gibt es spezielle Zeichensequenzen,
  die mit einem Prozenzeichen beginnen:
 <br/><br/>
  <table border="1">
   <tr>
    <th>Zeichensequenz</th>
    <th>Erzeuger Zeichencode</th>
    <th>Bedeutung</th>
   </tr>
   <tr>
    <td valign="top">%T<br/>%t</td>
    <td valign="top">9</td>
    <td valign="top">Tabulator</td>
   </tr>
   <tr>
    <td valign="top">%L<br/>%l</td>
    <td valign="top">10</td>
    <td valign="top">Line Feed</td>
   </tr>
   <tr>
    <td valign="top">%P<br/>%p</td>
    <td valign="top">12</td>
    <td valign="top">Form Feed</td>
   </tr>
   <tr>
    <td valign="top">%R<br/>%r</td>
    <td valign="top">13</td>
    <td valign="top">Carrige Return</td>
   </tr>
   <tr>
    <td valign="top">%%</td>
    <td valign="top">37</td>
    <td valign="top">Prozentzeichen</td>
   </tr>
   <tr>
    <td valign="top">%Q<br/>%q</td>
    <td valign="top">39</td>
    <td valign="top">Einfaches Anf&uuml;hrungszeichen</td>
   </tr>
  </table>
 <br/>
  Als weitere M&ouml;glichkeit kann man hinter dem Prozentzeichen
  mit zwei Hexadezimalziffern den Zeichencode angeben.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;.db&nbsp;&nbsp;"Text 1"<br/>
   &nbsp;&nbsp;.db&nbsp;&nbsp;'Text 2'<br/>
   &nbsp;&nbsp;.db&nbsp;&nbsp;'Zeile 1%R%LZeile 2'<br/>
   &nbsp;&nbsp;.db&nbsp;&nbsp;'Das Prozentzeichen: %%'<br/>
   &nbsp;&nbsp;.db&nbsp;&nbsp;'Das Escape-Zeichen: %1B'
  </tt>
 <br/><br/>
  <b>Hinweis:</b> Die mit dem Prozentzeichen beginnenden speziellen
  Zeichensequenzen entsprechen denen in
  <a href="asmsyntax.htm#literature">[1]</a>.
 <br/><br/>

 <h3><a name=".ds">3.5. Pseudobefehl <tt>.ds</tt></a></h3>
  Dieser Befehl reserviert Speicher, z.B. f&uuml;r Variablen.
  Der Befehl kann beliebig viele, durch Komma getrennte Argumente haben,
  wobei jedes Argument ein numerischer Ausdruck sein muss,
  der die Anzahl der zu reservierenden Bytes angibt.
  Die Adresse wird entsprechend weitergez&auml;hlt.
 <br/><br/>
  Steht der Befehl (auch mehrfach hintereinander) am Anfang oder
  am Ende des Quelltextes, wird kein Programmcode erzeugt.
  Steht der Befehl dagegebn mittendrin,
  d.h. davor und danach stehen Programmcode erzeugende Befehle,
  dann werden f&uuml;r den reservierten Speicherbereich
  %FF-Bytes (Z8-NOP-Befehle) erzeugt.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>&nbsp;&nbsp;.ds&nbsp;&nbsp;3*4,6&nbsp;&nbsp;;18 Bytes reservieren</tt>
 <br/><br/>

 <h3><a name=".ds.w">3.6. Pseudobefehl <tt>.ds.w</tt></a></h3>
  Der Befehl entspricht dem Pseudobefehl <tt>.ds</tt>
  nur mit dem Unterschied, dass der Speicher nicht in Anzahl Bytes
  sondern in Anzahl Datenw&ouml;rter reserviert wird.
  Verglichen mit dem <tt>.ds</tt>-Befehl werden also genau doppelt
  soviele Bytes reserviert.
 <br/><br/>
  <tt>&nbsp;&nbsp;.ds.w&nbsp;&nbsp;1&nbsp;&nbsp;;2 Bytes reservieren</tt>
 <br/><br/>

 <h3><a name=".dw">3.7. Pseudobefehl <tt>.dw</tt></a></h3>
  Mit diesem Befehl werden Datenw&ouml;rter (16&nbsp;Bit bzw. 2&nbsp;Bytes)
  an der aktuellen Stelle im Programmcode erzeugt.
  Das h&ouml;herwertige Byte steht vor dem niederwertigen.
 <br/><br/>
  Der Pseudobefehl kann beliebig viele Argumente haben,
  die durch Komma zu trennen sind.
  Jedes Argument muss ein
  <a href="asmsyntax.htm#expr">numerischer Ausdruck</a> sein.
 <br/><br/>
  Beispiel einer Adresstabelle mit Zeigern auf einzelne Routinen:
 <br/>
  <table border="0">
   <tr>
    <td valign="bottom">&nbsp;&nbsp;<tt>addr_tab:</tt></td>
    <td valign="bottom"><tt>.dw</tt></td>
    <td valign="bottom"><tt>addr1, addr2, addr3</tt></td>
    <td valign="bottom">&nbsp;&nbsp;<tt>;Tabelle</tt></td>
   </tr>
   <tr>
    <td></td>
    <td valign="bottom"><tt>...</tt>:</td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <td valign="bottom">&nbsp;&nbsp;<tt>addr1:</tt></td>
    <td valign="bottom"><tt>...</tt>:</td>
    <td></td>
    <td valign="bottom">&nbsp;&nbsp;<tt>;Routine 1</tt></td>
   </tr>
   <tr>
    <td></td>
    <td valign="bottom"><tt>ret</tt>:</td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <td valign="bottom">&nbsp;&nbsp;<tt>addr2:</tt></td>
    <td valign="bottom"><tt>...</tt>:</td>
    <td></td>
    <td valign="bottom">&nbsp;&nbsp;<tt>;Routine 2</tt></td>
   </tr>
   <tr>
    <td></td>
    <td valign="bottom"><tt>ret</tt>:</td>
    <td></td>
    <td></td>
   </tr>
  </table>
 <br/>

 <h3><a name=".end">3.8. Pseudobefehl <tt>.end</tt></a></h3>
  Dieser Befehl markiert das Ende des Assembler-Quelltextes
  bzw. der Quelltextdatei,
  d.h. alle weiteren Zeilen des Quelltextes bzw. der aktuellen
  Quelltextdatei werden ignoriert.
  Steht der Befehl in einer mit <tt>INCLUDE</tt> eingebundenen Datei,
  wird diese eingebundene Datei beendet und der Assembler setzt
  mit der n&auml;chsten Zeile hinter dem zugeh&ouml;rigen
  <tt>INCLUDE</tt>-Befehl fort.
 <br/><br/>
  Hinter dem Befehl <tt>END</tt> kann opional eine Bezeichnung
  angegeben werden, die jedoch keine Bedeutung hat.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>
   &nbsp;&nbsp;.title Testprogramm<br/>
   &nbsp;&nbsp;...&nbsp;&nbsp;;eigentliches Assembler-Programm<br/>
   &nbsp;&nbsp;.end Testprogramm<br/>
   &nbsp;&nbsp;--- Ab hier wird alles ignoriert. ---
  </tt>
 <br/><br/>

 <h3><a name=".ent">3.9. Pseudobefehl <tt>.ent</tt></a></h3>
  Der Befehl hat keine Argumente und markiert die Stelle,
  an der das Assembler-Programm gestartet wird.
  Der Befehl hat nur eine Wirkung, wenn der Assembler
  den erzeugten Programmcode in eine Datei schreibt
  und das Format dieser Datei eine Startadresse unterst&uuml;tzt.
  In dem Fall wird die Adresse, an der der <tt>.ent</tt>-Befehl steht,
  als Startadresse in die Datei geschrieben,
  anderenfalls steht keine Startadresse in der Datei.
 <br/><br/>

 <h3><a name=".equ">3.10. Pseudobefehl <tt>.equ</tt></a></h3>
  Dieser Befehl legt die links stehende Marke mit dem rechts
  stehenden Wert an.
  Die Marke muss in dem Fall nicht zwingend mit einem Doppelpunkt
  abgeschlossen sein.
 <br/><br/>
  Beispiele:
 <br/>
  <table border="0">
   <tr>
    <td valign="bottom">
     &nbsp;&nbsp;<tt>ABC</tt><br/>
     &nbsp;&nbsp;<tt>DEF:</tt>
    </td>
    <td valign="bottom">
     &nbsp;<tt>.equ</tt><br/>
     &nbsp;<tt>.equ</tt>
    </td>
    <td valign="bottom">
     &nbsp;<tt>12</tt><br/>
     &nbsp;<tt>%34</tt>
    </td>
   </tr>
  </table>
 <br/>
  Der rechts stehende <a href="asmsyntax.htm#expr">Ausdruck</a>
  kann auch Marken enthalten, die erst weiter hinten im Assembler-Programm
  angelegt werden (sogenannte Vorw&auml;rtsreferenzen).
  In dem Fall wird der Wert der Marke erst dann berechnet,
  wenn er ben&ouml;tigt wird.
 <br/><br/>
  Beispiel:
 <br/>
  <table border="0">
   <tr>
    <td valign="bottom">
     &nbsp;&nbsp;<tt>STR_LEN</tt><br/>
     &nbsp;&nbsp;<tt>M1:</tt><br/>
     &nbsp;&nbsp;<tt>M2:</tt>
    </td>
    <td valign="bottom">
     &nbsp;<tt>.equ</tt><br/>
     &nbsp;<tt>.db</tt><br/>
     &nbsp;<tt>.db</tt>
    </td>
    <td valign="bottom">
     &nbsp;<tt>M2-M1</tt><br/>
     &nbsp;<tt>'Ein String'</tt><br/>
     &nbsp;<tt>0</tt>
    </td>
   </tr>
  </table>
 <br/>
  <b>Achtung!</b> Wird eine Marke mit Vorw&auml;rtsreferenz
  in den Pseudobefehlen <a href="asmsyntax.htm#.ds"><tt>.ds</tt></a>
  oder <a href="asmsyntax.htm#.org"><tt>.org</tt></a>
  oder in bestimmten F&auml;llen bei der
  <a href="asmsyntax.htm#cond_asm">bedingten Assemblierung</a>
  verwendet, meldet der Assembler einen Fehler, da hier der Wert
  der Marke schon zum Zeitpunkt der Befehlsverarbeitung ben&ouml;tigt wird
  und nicht erst sp&auml;ter &quot;nachgereicht&quot; werden kann.
 <br/><br/>
  <b>Achtung!</b> Wenn zwei Marken sich direkt oder indirekt
  gegenseitig referenzieren, k&ouml;nnen die Werte dieser Marken
  nicht berechnet werden.
  In dem Fall meldet der Assembler einen Fehler mit
  &quot;nicht aufl&ouml;sbaren Vorw&auml;rtsreferenzen&quot;,
  sobald der Wert der Marke ben&ouml;tigt wird.
 <br/><br/>

 <h3><a name=".error">3.11. Pseudobefehl <tt>.error</tt></a></h3>
  Mit <tt>.error</tt> kann man w&auml;hrend des Assemblierens
  einen Fehler ausgeben.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;.error&nbsp;&nbsp;'Das ist eine Fehlermeldung'<br/>
   &nbsp;&nbsp;.error&nbsp;&nbsp;"Fehler !!!"<br/>
  </tt>
 <br/><br/>

 <h3><a name=".include">3.12. Pseudobefehl <tt>.include</tt></a></h3>
  Mit <tt>.include</tt> wird eine weitere Assembler-Quelltextdatei
  eingebunden.
  Der Assembler verarbeitet die eingebundene Datei
  und setzt dann mit der n&auml;chsten Zeile des Haupt-Quelltextes fort.
  Geschachtelte <tt>.include</tt>-Befehle sind nicht m&ouml;glich,
  d.h., in der der eingebundenen Datei darf kein <tt>.include</tt>-Befehl
  vorkommen.
 <br/><br/>
  Bzgl. des Dateinamens der eingebundenen Datei gilt das gleiche
  wie bei <a href="asmsyntax.htm#.binclude"><tt>.binclude</tt></a>.
 <br/><br/>
  Mit dem <tt>.include</tt>-Befehl ist es m&ouml;glich,
  in mehreren Assembler-Programmen ben&ouml;tigte gleiche Quelltextteile
  in separate Dateien auslagern und dann in den einzelnen Programmen
  an den ben&ouml;tigten Stellen einfach einzubinden.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>&nbsp;&nbsp;.include&nbsp;&nbsp;'bibliothek.asm'</tt>
 <br/><br/>

 <h3><a name=".org">3.13. Pseudobefehl <tt>.org</tt></a></h3>
  Mit <tt>.org</tt> wird der Programmz&auml;hler auf den angegebenen Wert,
  d.h. auf eine bestimmte Adresse gesetzt.
  &Uuml;blicherweise beginnt jedes Assembler-Programm mit einem
  <tt>.org</tt>-Befehl, der die Anfangsadresse des Programms angibt.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>&nbsp;&nbsp;.org&nbsp;&nbsp;%E000</tt>
 <br/><br/>
  Der <tt>.org</tt>-Befehl kann im Programm mehrfach vorkommen,
  allerdings kann die Adresse nicht vor die aktualle Position gesetzt werden.
  Durch mehrfache <tt>.org</tt>-Befehle auftretende L&uuml;cken
  im erzeugten Programmcode werden mit %FF-Bytes (Z8-NOP-Befehl)
  gef&uuml;llt.
 <br/><br/>

 <h3><a name=".title">3.14. Pseudobefehl <tt>.title</tt></a></h3>
  Mit <tt>.title</tt> gibt man dem Assmbler-Programm einen Titel
  bzw. eine Bezeichnung.
  Der Befehl hat nur eine Wirkung, wenn der Assembler
  den erzeugten Programmcode in eine Datei schreibt
  und das Format dieser Datei eine Bezeichnung unterst&uuml;tzt.
  In dem Fall wird der Titel als Bezeichnung in die Datei geschrieben.
 <br/><br/>
  Wenn der Titel Leereichen oder Tabulatoren enth&auml;lt,
  muss er in einfachen oder doppelten Hochkommas geschrieben werden.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;.title&nbsp;&nbsp;Mein_Programm<br/>
   &nbsp;&nbsp;.title&nbsp;&nbsp;'Mein Programm'<br/>
   &nbsp;&nbsp;.title&nbsp;&nbsp;"Mein Programm"<br/>
  </tt>
 <br/><br/>
  <b>Achtung!</b> Mehrfache <tt>.title</tt>-Befehle sind nicht erlaubt.
 <br/><br/>

 <h3><a name=".warning">3.15. Pseudobefehl <tt>.warning</tt></a></h3>
  Mit <tt>.warning</tt> kann man w&auml;hrend des Assemblierens
  eine Warnung ausgeben.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>
   &nbsp;&nbsp;.warning&nbsp;&nbsp;"Das ist eine Warnung"<br/>
  </tt>
 <br/><br/>
  <b>Achtung!</b> Warnungen werden nur im zweiten Assembler-Lauf ausgegeben.
  Wenn im ersten Assembler-Lauf Fehler auftreten und somit kein
  zweiter Assembler-Lauf stattfindet, erfolgt auch keine Ausgabe
  von Warnungen.
 <br/><br/>
  <b>Achtung!</b> Warnungen werden nur dann ausgegeben,
  wenn diese nicht mit <tt>.warnoff</tt> unterdr&uuml;ckt wurden
  bzw. wenn sie mit <tt>.warnon</tt> wieder aktiviert wurden.
 <br/><br/>

 <h3><a name=".warnoff">3.16. Pseudobefehl <tt>.warnoff</tt></a></h3>
  Mit <tt>.warnoff</tt> wird die Ausgabe von Warnungen deaktiviert.
 <br/><br/>

 <h3><a name=".warnon">3.17. Pseudobefehl <tt>.warnon</tt></a></h3>
  Mit <tt>.warnon</tt> wird die Ausgabe von Warnungen aktiviert,
  d.h. es hebt ein vorheriges <tt>.warnoff</tt> auf.
 <br/><br/>


 <h2><a name="expr">4. Numerische Ausdr&uuml;cke</a></h2>
  Numerische Ausdr&uuml;cke kommen &uuml;berall dort zur Anwendung,
  wo ein numerischer Wert ben&ouml;tigt wird.
  In dem Assemblerbefehl
 <br/><br/>
  &nbsp;&nbsp;<tt>LD %20,#123</tt>
 <br/><br/>
  sind sowohl der Teil <em>%20</em> als auch auch der Teil <em>123</em>
  numerische Ausdr&uuml;cke,
  und zwar konkret Zahlenliterale (Hexadezimalzahl und Dezimalzahl).
  Numerische Ausdr&uuml;cke k&ouml;nnen aber auch komplexer sein
  und zus&auml;tzlich Operatoren, Zeichenliterale und Marken enthalten.
  Au&szlig;erdem k&ouml;nnen numerische Ausdr&uuml;cke mit runden Klammern
  beliebig geschachtelt werden.
 <br/><br/>
  Numerische Ausdr&uuml;cke werden vorzeichenlos mit 16&nbsp;Bit
  ohne &Uuml;berlaufpr&uuml;fung berechnet.
  Wenn eine Subtraktion ein negatives Ergebnlis liefert,
  werden die unteren 16&nbsp;Bit des Ergebnisses als nicht-negative
  (also Null oder positive) 16-Bit-Zahl gewertet.
 <br/><br/>
  Die Syntax der numerischen Ausdr&uuml;cke ist kompatibel zu der in
  <a href="asmsyntax.htm#literature">[1]</a>.
 <br/><br/>

 <h3><a name="number_literal">4.1. Zahlenliterale</a></h3>
  Zahlenliterale beginnen mit einer Ziffer oder einem Prozentzeichen.
  F&uuml;r Bin&auml;r- und Hexadezimalzahlen sind jeweils zwei
  verschiedene Syntaxvarianten m&ouml;glich.
 <br/><br/>

 <h3><a name="dec_literal">4.1.1. Dezimalzahlen</a></h3>
  Dezimalzahlen bestehen nur aus Ziffern und haben kein vorangestelltes
  Prozentzeichen und auch keinen nachfolgenden Erkennungsbuchstaben.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;0<br/>
   &nbsp;&nbsp;12<br/>
   &nbsp;&nbsp;345
  </tt>
 <br/><br/>

 <h3><a name="hex_literal">4.1.2. Hexadezimalzahlen</a></h3>
  Hexadezimalzahlen beginnen entweder mit einem Prozentzeichen,
  gefolgt von der eigentlichen Hexadezimalzahl oder
  sie beginnen mit einer Ziffer und enden mit dem Buchstaben <em>H</em>
  bzw. <em>h</em>.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;%41<br/>
   &nbsp;&nbsp;%A<br/>
   &nbsp;&nbsp;%E000<br/>
   &nbsp;&nbsp;00H<br/>
   &nbsp;&nbsp;0Ah<br/>
   &nbsp;&nbsp;0E000H
  </tt>
 <br/><br/>

 <h3><a name="bin_literal">4.1.3. Bin&auml;rzahlen</a></h3>
  Bin&auml;rzahlen beginnen entweder mit <em>%(2)</em>
  gefolgt von der eigentlichen Bin&auml;rzahl oder
  sie beginnen mit einer Ziffer und enden mit dem Buchstaben <em>B</em>
  bzw. <em>b</em>.
 <br/><br/>
  Beispiele:
 <br/>
  <tt>
   &nbsp;&nbsp;%(2)101<br/>
   &nbsp;&nbsp;%(2)0110<br/>
   &nbsp;&nbsp;101B<br/>
   &nbsp;&nbsp;0110b
  </tt>
 <br/><br/>
  <b>Achtung!</b> Beginnt eine Bin&auml;rzahl mit 0 oder 1
  und es folgt hinter der Bin&auml;rzahl ein gro&szlig;es oder kleines
  <em>H</em>, dann wird diese Zahl als Hexadezimalzahl erkannt.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>&nbsp;&nbsp;101Bh&nbsp;&nbsp;;Das ist eine Hexadezimalzahl!</tt>
 <br/><br/>

 <h3><a name="oct_literal">4.1.4. Oktalzahlen</a></h3>
  Oktalzahlen beginnen mit <em>%(8)</em>
  gefolgt von der eigentlichen Oktalzahl.
 <br/><br/>
  Beispiel:
 <br/>
  <tt>
   &nbsp;&nbsp;%(8)707<br/>
   &nbsp;&nbsp;%(8)1357
  </tt>
 <br/><br/>

 <h3><a name="char_literal">4.2. Zeichenliterale</a></h3>
  Ein Zeichenliteral ist ein in einfachen Hochkommas
  eingeschlossenes Zeichen, z.B. <tt>'A'</tt>.
  Ein Zeichenliteral kann innerhalb eines numerischen Ausdrucks
  verwendet werden und liefert den numerischen Wert des Zeichencodes.
 <br/><br/>
  <b>Achtung!</b> Aufgrund unterschiedlicher Zeichens&auml;tze
  zwischen Texteditor und Zielsystem sollten nur ASCII-Zeichen
  in Zeichenliteralen verwendet werden.
 <br/><br/>

 <h3><a name="unary_op">4.3. Un&auml;re Operatoren</a></h3>
  Un&auml;re Operatoren wirken auf den nachfolgenden Ausdruck.
 <br/><br/>
  <table border="1">
   <tr><th>Operator</th><th>Beschreibung</th></tr>
   <tr>
    <td valign="top">+</td>
    <td valign="top">
     Positives&nbsp;Vorzeichen:
     Der nachfolgende Wert wird nicht ver&auml;ndert.
    </td>
   </tr>
   <tr>
    <td valign="top">-</td>
    <td valign="top">
     Negatives&nbsp;Vorzeichen:
     Der nachfolgende Wert wird mathematisch negiert.<br/>
     <b>Achtung!</b> Aufgrund der vorzeichenlosen Berechnung
     ist das Ergebnis niemals negativ.<br/>
     <tt>-1</tt> ergibt <tt>%FFFF</tt> bzw. <tt>65535</tt>.
    </td>
   </tr>
   <tr>
    <td valign="top">NOT<br/>LNOT</td>
    <td valign="top">
     Logical&nbsp;NOT: Der nachfolgende Wert wird bitweise negiert
    </td>
   </tr>
  </table>
 <br/><br/>

 <h3><a name="bi_op">4.4. Operatoren mit zwei Operanden</a></h3>
  Bin&auml;re Operatoren stehen zwischen zwei Ausdr&uuml;cken.
 <br/>
  <table border="1">
   <tr><th>Operator</th><th>Beschreibung</th></tr>
   <tr><td valign="top">+</td><td valign="top">Addition</td></tr>
   <tr>
    <td valign="top">-</td>
    <td valign="top">
     Subtraktion<br/>
     <b>Achtung!</b> Aufgrund der vorzeichenlosen Berechnung
     ist das Ergebnis niemals negativ.<br/>
     <tt>1 - 3</tt> ergibt <tt>%FFFE</tt> bzw. <tt>65534</tt>.
    </td>
   </tr>
   <tr><td valign="top">*</td><td valign="top">Multiplikation</td></tr>
   <tr><td valign="top">/</td><td valign="top">Division</td></tr>
   <tr>
    <td valign="top">MOD</td>
    <td valign="top">Modulo - Rest der Division</td>
   </tr>
   <tr>
    <td valign="top">AND<br/>LAND</td>
    <td valign="top">Logical&nbsp;AND: bitweise UND-Verkn&uuml;pfung</td>
   </tr>
   <tr>
    <td valign="top">OR<br/>LOR</td>
    <td valign="top">Logical&nbsp;OR: bitweise Inklusiv-ODER-Verkn&uuml;pfung</td>
   </tr>
   <tr>
    <td valign="top">XOR<br/>LXOR</td>
    <td valign="top">
     Logical&nbsp;XOR: bitweise Exklusiv-ODER-Verkn&uuml;pfung
    </td>
   </tr>
   <tr>
    <td valign="top">SHL</td>
    <td valign="top">
     links schieben<br/>
     Der links vom Operator stehende Wert wird um soviele Bits nach links
     geschoben, wie der Wert rechts vom Operator angibt.
     Nach der Operation ist das unterste Bit immer 0.
    </td>
   </tr>
   <tr>
    <td valign="top">SHR</td>
    <td valign="top">
     links schieben<br/>
     Der links vom Operator stehende Wert wird um soviele Bits nach rechts
     geschoben, wie der Wert rechts vom Operator angibt.
     Nach der Operation ist das oberste Bit immer 0.
    </td>
   </tr>
   <tr>
    <td valign="top">&lt;</td>
    <td valign="top">
     Vergleich auf kleiner als<br/>
     Ist der erste Wert kleiner als der zweite,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
   <tr>
    <td valign="top">&lt;=</td>
    <td valign="top">
     Vergleich auf kleiner oder gleich<br/>
     Ist der erste Wert kleiner oder gleich dem zweiten,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
   <tr>
    <td valign="top">&gt;</td>
    <td valign="top">
     Vergleich auf gr&ouml;&szlig;er als<br/>
     Ist der erste Wert gr&ouml;&szlig;er als der zweite,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
   <tr>
    <td valign="top">&gt;=</td>
    <td valign="top">
     Vergleich auf gr&ouml;&szlig;er oder gleich<br/>
     Ist der erste Wert gr&ouml;&szlig;er oder gleich dem zweiten,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
   <tr>
    <td valign="top">=</td>
    <td valign="top">
     Vergleich auf Gleichheit<br/>
     Ist der erste Wert gleich dem zweiten,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
   <tr>
    <td valign="top">&lt;&gt;</td>
    <td valign="top">
     Vergleich auf Ungleichheit<br/>
     Ist der erste Wert ungleich dem zweiten,
     ergibt das den Wert&nbsp;%FFFF (alle Bits gesetzt), anderenfalls&nbsp;0.
    </td>
   </tr>
  </table>
 <br/>

 <h3><a name="cur_addr">4.5. Aktuelle Adresse</a></h3>
  Die aktuelle Adresse wird durch das $-Zeichen repr&auml;sentiert.
  Wenn Sie also in einem Ausdruck den Wert des Programm Counters
  (Register&nbsp;PC) zu Beginn der aktuellen Assembler-Zeile ben&ouml;tigen,
  schreiben Sie daf&uuml;r das Zeichen:&nbsp;$
 <br/><br/>

 <h3><a name="high_low">
  4.6. Zugriff auf h&ouml;her- bzw. niederwertiges Byte</a>
 </h3>
  Bei CPU-Befehlen mit einem 8-Bit-Direktwert kann durch Angabe
  des Schl&uuml;sselwortes <tt>HIGH</tt> oder <tt>HI</tt> bzw.
  <tt>LOW</tt> oder <tt>LO</tt> hinter dem Doppelkreuz festgelegt werden,
  dass nur der Wert des h&ouml;her- bzw. niederwertiges Bytes
  des nachfolgenden Ausdrucks verwendet werden soll.
  Die Schl&uuml;sselw&ouml;rter k&ouml;nnen auch klein geschrieben werden.
 <br/><br/>
  Beispiele (Ausdr&uuml;cke mit Marken):
 <br/>
  <tt>
   &nbsp;&nbsp;LD&nbsp;%23,#HI abc*3<br/>
   &nbsp;&nbsp;LD&nbsp;%24,#high M_ADDR<br/>
   &nbsp;&nbsp;LD&nbsp;%24,#lo M_ADDR<br/>
   &nbsp;&nbsp;LD&nbsp;%24,#LOW ABC SHL 4
  </tt>
 <br/><br/>

 <h3><a name="op_priority">4.7. Vorrangregeln</a></h3>
  Wenn in einem numerischen Ausdruck mehrere Operatoren vorkommen,
  dann berechnet der Assembler die Teilausdr&uuml;cke zuerst,
  deren Operatorn eine h&ouml;here Bindungskraft haben.
  Bei gleicher Bindungskraft werden die Operatoren
  von links nach rechts berechnet.
  Die Berechnungsreihenfolge kann durch Setzen von runden Klammern
  ge&auml;ndert werden.
  Diese haben die h&ouml;chste Bindungskraft.
 <br/><br/>
  Un&auml;re Operatoren haben eine h&ouml;here Bindungskraft
  als Operatoren mit zwei Operanden.
  Die Tabelle zeigt die Bindungskraft der einzelnen Operatoren.
  Innerhalb einer Tabellenzeile ist die Bindungskraft gleich,
  d.h., diese Operatoren werden von links nach rechts abgearbeitet.
 <br/><br/>
  <table border="1">
   <tr><th>Bindungskraft</th><th>Zugeh&ouml;rige Operatoren</th></tr>
   <tr>
    <td valign="top">am h&ouml;chsten</td>
    <td>
     <tt>+</tt> (Vorzeichen)<br/>
     <tt>-</tt> (Vorzeichen)<br/>
     <tt>NOT<br/>LNOT</tt>
    </td>
   </tr>
   <tr>
    <td></td>
    <td>
     <tt>*</tt> (Multiplikation)<br/>
     <tt>/</tt> (Division)<br/>
     <tt>AND<br/>LAND</tt><br/>
     <tt>MOD</tt><br/>
     <tt>SHL</tt><br/>
     <tt>SHR</tt>
    </td>
   </tr>
   <tr>
    <td></td>
    <td>
     <tt>+</tt> (Addition)<br/>
     <tt>-</tt> (Subtraktion)<br/>
     <tt>OR<br/>LOR</tt><br/>
     <tt>XOR<br/>LXOR</tt>
    </td>
   </tr>
   <tr>
    <td valign="top">am niedrigsten</td>
    <td>
     <tt>=</tt><br/>
     <tt>&lt;&gt;</tt><br/>
     <tt>&lt;=</tt><br/>
     <tt>&lt;</tt><br/>
     <tt>&gt;=</tt><br/>
     <tt>&gt;</tt>
    </td>
   </tr>
  </table>
 <br/>

 <h3><a name="grammar">4.8. Grammatik</a></h3>
  Folgende Grammatik beschreibt die Syntax der Ausdr&uuml;cke:
 <br/><br/>
  <i>Direktwert:</i><br/>
  &nbsp;&nbsp;<tt>#</tt>&nbsp;<i>Ausdruck</i><br/>
  &nbsp;&nbsp;<tt>#HI</tt>&nbsp;<i>Ausdruck</i><br/>
  &nbsp;&nbsp;<tt>#HIGH</tt>&nbsp;<i>Ausdruck</i><br/>
  &nbsp;&nbsp;<tt>#LO</tt>&nbsp;<i>Ausdruck</i><br/>
  &nbsp;&nbsp;<tt>#LOW</tt>&nbsp;<i>Ausdruck</i><br/>
 <br/>
  <i>Ausdruck:</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>=</tt>&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>&lt;&gt;</tt>&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>&lt;</tt>&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>&gt;=</tt>&nbsp;<i>Additionsausdruck</i><br/>
  &nbsp;&nbsp;<i>Ausdruck</i>&nbsp;<tt>&gt;</tt>&nbsp;<i>Additionsausdruck</i><br/>
 <br/>
  <i>Additionsausdruck:</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>+</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>-</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>LOR</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>LXOR</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>OR</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
  &nbsp;&nbsp;<i>Additionsausdruck</i>&nbsp;<tt>XOR</tt>&nbsp;<i>Multiplikationsausdruck</i><br/>
 <br/>
  <i>Multiplikationsausdruck:</i><br/>
  &nbsp;&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>*</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>/</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>AND</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>LAND</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>MOD</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>SHL</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
  &nbsp;&nbsp;<i>Multiplikationsausdruck:</i>&nbsp;<tt>SHR</tt>&nbsp;<i>Un&auml;rer_Ausdruck</i><br/>
 <br/>
  <i>Un&auml;rer_Ausdruck:</i><br/>
  &nbsp;&nbsp;<i>Prim&auml;rausdruck</i><br/>
  &nbsp;&nbsp;<tt>+</tt>&nbsp;<i>Prim&auml;rausdruck</i><br/>
  &nbsp;&nbsp;<tt>-</tt>&nbsp;<i>Prim&auml;rausdruck</i><br/>
  &nbsp;&nbsp;<tt>NOT</tt>&nbsp;<i>Prim&auml;rausdruck</i><br/>
  &nbsp;&nbsp;<tt>LNOT</tt>&nbsp;<i>Prim&auml;rausdruck</i><br/>
  &nbsp;&nbsp;<tt>(</tt>&nbsp;<i>Ausdruck</i>&nbsp;<tt>)</tt><br/>
 <br/>
  <i>Prim&auml;rausdruck:</i><br/>
  &nbsp;&nbsp;<tt>$</tt><br/>
  &nbsp;&nbsp;<i>Marke</i><br/>
  &nbsp;&nbsp;<i>Zahl</i><br/>
  &nbsp;&nbsp;<tt>'</tt>&nbsp;<i>8-Bit-Zeichen</i>&nbsp;<tt>'</tt><br/>
 <br/>
  <i>Zahl:</i><br/>
  &nbsp;&nbsp;<i>Dezimalzahl</i><br/>
  &nbsp;&nbsp;<i>Hexadezimalzahl</i><br/>
  &nbsp;&nbsp;<i>Bin&auml;rzahl</i><br/>
  &nbsp;&nbsp;<i>Oktalzahl</i><br/>
 <br/>
  <i>Dezimalzahl:</i><br/>
  &nbsp;&nbsp;<i>&lt;Folge von Dezimalziffern&gt;</i><br/>
 <br/>
  <i>Dezimalziffer:</i><br/>
  &nbsp;&nbsp;<i>&lt;Ziffer 0...9&gt;</i><br/>
 <br/>
  <i>Hexadezimalzahl:</i><br/>
  &nbsp;&nbsp;<i>Dezimalziffer</i>&nbsp;H<br/>
  &nbsp;&nbsp;<i>Dezimalziffer</i>&nbsp;<i>&lt;Folge von Hexadezimalziffern&gt;</i>&nbsp;H<br/>
  &nbsp;&nbsp;<tt>%</tt>&nbsp;<i>&lt;Folge von Hexadezimalziffern&gt;</i><br/>
 <br/>
  <i>Hexadezimalziffer:</i><br/>
  &nbsp;&nbsp;<i>&lt;Ziffer 0...9 oder Buchstabe A...F&gt;</i><br/>
 <br/>
  <i>Bin&auml;rzahl:</i><br/>
  &nbsp;&nbsp;<i>&lt;Folge von Bin&auml;rziffern&gt;</i>&nbsp;B<br/>
  &nbsp;&nbsp;<tt>%(2)</tt><i>&lt;Folge von Bin&auml;rziffern&gt;</i><br/>
 <br/>
  <i>Bin&auml;rziffer:</i><br/>
  &nbsp;&nbsp;<i>&lt;Ziffer 0 oder 1&gt;</i><br/>
 <br/>
  <i>Oktalzahl:</i><br/>
  &nbsp;&nbsp;<tt>%(8)</tt>&nbsp;<i>&lt;Folge von Oktalziffern&gt;</i><br/>
 <br/>
  <i>Oktalziffer:</i><br/>
  &nbsp;&nbsp;<i>&lt;Ziffer 0...7&gt;</i><br/>
 <br/>


 <h2>
  <a name="cond_asm">5. Assembler-Direktiven und bedingte Assemblierung</a>
 </h2>
  Unter bedingter Assemblierung versteht man,
  dass Teile des Quelltextes nur dann assembliert werden,
  wenn eine bestimmte Bedingung erf&uuml;llt ist.
 <br/><br/>
  Ein der bedingten Assemblierung unterliegender Quelltextabschnitt
  beginnt mit einer <tt>$IF</tt>-, <tt>$IFFALSE-</tt>
  <tt>$IFDEF</tt>- oder <tt>$IFNDEF</tt>-Direktive
  und endet mit einer <tt>$ENDIF</tt>-Direktive.
  Opional k&ouml;nnen dazwischen <tt>$ELSE</tt>-Direktiven
  (auch mehrere) vorkommen, die den Assemblierungsstatus jedesmal umkehren.
 <br/><br/>
  Die Tabelle zeigt die Assembler-Direktiven f&uuml;r bedingte Assemblierung.
  Die in spitzen Klammern stehenden Teile sowie drei Punkte
  sind entsprechend zu ersetzen.
  Die in eckigen Klammern stehenden Teile sind optional
  und k&ouml;nnen weggelassen werden.
 <br/><br/>
  <table border="1">
   <tr><th>Direktive/Syntax</th><th>Synonyme</th></tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$IF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;[$THEN]</tt><br/>
     <tt>$IF&nbsp;<i>&lt;Ausdruck&gt;</i>&nbsp;[$THEN]</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.if&nbsp;...&nbsp;[.then]</tt><br/>
     <tt>IF&nbsp;...&nbsp;[THEN]</tt><br/>
     <tt>$IFTRUE&nbsp;...&nbsp;[$THEN]</tt><br/>
     <tt>.iftrue&nbsp;...&nbsp;[.then]</tt><br/>
     <tt>IFTRUE&nbsp;...&nbsp;[THEN]</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$IFFALSE&nbsp;<i>&lt;Marke&gt;</i>&nbsp;[$THEN]</tt><br/>
     <tt>$IFFALSE&nbsp;<i>&lt;Ausdruck&gt;</i>&nbsp;[$THEN]</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.iffalse&nbsp;...&nbsp;[.then]</tt><br/>
     <tt>IFFALSE&nbsp;...&nbsp;[THEN]</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$IFDEF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;[$THEN]</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.ifdef&nbsp;...&nbsp;[.then]</tt><br/>
     <tt>IFDEF&nbsp;...&nbsp;[THEN]</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$IFNDEF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;[$THEN]</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.ifndef&nbsp;...&nbsp;[.then]</tt><br/>
     <tt>IFNDEF&nbsp;...&nbsp;[THEN]</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$ELSE</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.else</tt><br/>
     <tt>ELSE</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$ENDIF&nbsp;[<i>&lt;Bezeichnung&gt;</i>]</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>$FI&nbsp;[<i>&lt;Bezeichnung&gt;</i>]</tt><br/>
     <tt>.endif&nbsp;[<i>&lt;Bezeichnung&gt;</i>]</tt><br/>
     <tt>ENDIF&nbsp;[<i>&lt;Bezeichnung&gt;</i>]</tt>
    </td>
   </tr>
   <tr>
    <td valign="top" nowrap="nowrap">
     <tt>$EVEN</tt>
    </td>
    <td valign="top" nowrap="nowrap">
     <tt>.even</tt><br/>
     <tt>EVEN</tt><br/>
    </td>
   </tr>
  </table>
 <br/>
  Anstelle der Schl&uuml;selw&ouml;rter aus der ersten Tabellenspalte
  k&ouml;nnen auch die zugeh&ouml;rigen Synonyme aus der zweiten
  Spalte verwendet werden.
  Die Gro&szlig;-/Kleinschreibung der Schl&uuml;selw&ouml;rter ist egal.
 <br/><br/>
  <b>Achtung!</b> Wenn in Assembler-Direktiven f&uuml;r die bedingte
  Assemblierung Marken verwendet werden, m&uuml;ssen in dem Augenblick,
  wenn der Assembler eine Direktive auswertet,
  die Werte der darin enthaltenen Marken berechnet werden k&ouml;nnen,
  d.h., diese Marken d&uuml;rfen keine Vorw&auml;rtsreferenzen enthalten.
  Anderenfalls meldet der Assembler einen Fehler.
 <br/><br/>
  Es gibt auch Assembler-Direktiven, die nur das Vorhandensein
  einer Marke pr&uuml;fen.
  Bei diesen Assembler-Direktiven k&ouml;nnen die Marken
  auch Vorw&auml;rtsreferenzen enthalten.
 <br/><br/>

 <h3>
  <a name="$if">5.1. Assembler-Direktive <tt>$IF</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$IF&nbsp;<i>&lt;Marke&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;$THEN</tt><br/>
  &nbsp;&nbsp;<tt>$IF&nbsp;<i>&lt;Ausdruck&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IF&nbsp;<i>&lt;Ausdruck&gt;</i>&nbsp;$THEN</tt><br/>
 <br/>
  Wird nur eine einzelne Marke angegeben,
  dann wird der nachfolgende Quelltextabschnitt assembliert,
  wenn die Marke existiert und einen Wert ungleich&nbsp;0 hat.<br/>
  Existiert die Marke nicht oder sie hat den numerischen Wert&nbsp;0,
  dann wir der nachfolgende Quelltextabschnitt nicht assembliert.
  Existiert die Marke, dann muss auch deren numerischer Wert berechnet
  werden k&ouml;nnen.
 <br/><br/>
  Die zweite Syntaxvariante testet auf einen Ausdruck,
  der nicht nur aus einer Marke besteht.
  In dieser Variante m&uuml;ssen alle im Ausdruck vorkommenden Marken
  vorhanden sein und deren Werte auch berechnet werden k&ouml;nnen.
  Der nachfolgende Quelltextabschnitt wird dann assembliert,
  wenn der Wert des Ausdrucks ungleich&nbsp;0 ist.<br/>
 <br/><br/>
  Das Schl&uuml;sselwort <tt>$THEN</tt> ist optional
  und kann weggelassen werden.
  Es wird aus Gr&uuml;nden der Kompatibilit&auml;t zur Syntax in
  <a href="asmsyntax.htm#literature">[1]</a>,
  unterst&uuml;tzt.
 <br/><br/>

 <h3>
  <a name="$iffalse">5.2. Assembler-Direktive <tt>$IFFALSE</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$IFFALSE&nbsp;<i>&lt;Marke&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IFFALSE&nbsp;<i>&lt;Marke&gt;</i>&nbsp;$THEN</tt><br/>
  &nbsp;&nbsp;<tt>$IFFALSE&nbsp;<i>&lt;Ausdruck&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IFFALSE&nbsp;<i>&lt;Ausdruck&gt;</i>&nbsp;$THEN</tt><br/>
 <br/>
  <tt>$IFFALSE</tt> ist die Umkehrung der <tt>$IF</tt>-Direktive,
  d.h. die <tt>$IF</tt>-Direktive nach dem ersten <tt>$ELSE</tt>.
  Der nachfolgende Quelltextabschnitt wird assembliert,
  wenn die Marke nicht existiert oder den Wert&nbsp;0 hat
  oder der numerische Ausdruck den Wert&nbsp;0 hat.
 <br/><br/>

 <h3>
  <a name="$ifdef">5.3. Assembler-Direktive <tt>$IFDEF</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$IFDEF&nbsp;<i>&lt;Marke&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IFDEF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;$THEN</tt><br/>
 <br/>
  Der nachfolgende Quelltextabschnitt wird assembliert,
  wenn die angegebene Marke existiert.
  Der Wert der Marke spielt keine Rolle.
 <br/><br/>

 <h3>
  <a name="$ifndef">5.4. Assembler-Direktive <tt>$IFNDEF</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$IFNDEF&nbsp;<i>&lt;Marke&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$IFNDEF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;$THEN</tt><br/>
 <br/>
  Dies ist die Umkehrung der <tt>$IFDEF</tt>-Direktive.
  Der nachfolgende Quelltextabschnitt wird somit assembliert,
  wenn die angegebene Marke nicht existiert.
  Der Wert der Marke spielt keine Rolle.
 <br/><br/>

 <h3>
  <a name="$elseif">5.5. Assembler-Direktive <tt>$ELSEIF</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$ELSEIF&nbsp;<i>&lt;Marke&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$ELSEIF&nbsp;<i>&lt;Marke&gt;</i>&nbsp;$THEN</tt><br/>
  &nbsp;&nbsp;<tt>$ELSEIF&nbsp;<i>&lt;Ausdruck&gt;</i></tt><br/>
  &nbsp;&nbsp;<tt>$ELSEIF&nbsp;<i>&lt;Ausdruck&gt;</i>&nbsp;$THEN</tt><br/>
 <br/>
  <tt>$ELSEIF</tt> kann nach einer der oben beschriebenen $IF-Direktiven
  stehen und erm&ouml;glicht einen weiter Zweig der bedingten Assemblierung.
  Wurde der Abschnitt der $IF-Direktive nicht assembliert,
  dann wird die $ELSEIF-Direktive gepr&uuml;ft.
  Bzgl. der Bedingung gilt das gleiche wie bei der
  <a name="$if"><tt>$IFFALSE</tt>-Direktive</a>.
  Es k&ouml;nnen beliebig viele $ELSEIF-Direktiven angegebene werden.
 <br/><br/>

 <h3>
  <a name="$else">5.6. Assembler-Direktive <tt>$ELSE</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$ELSE</tt>
 <br/><br/>
  <tt>$ELSE</tt> kann nach einer der oben beschriebenen $IF-Direktiven
  oder der $ELSEIF-Direktive stehen und kehrt den Assemblierungsstatus um,
  d.h., wurde der Abschnitt vor <tt>$ELSE</tt> assembliert,
  dann wird der nachfolgende Abschnitt nicht assembliert.
  Das gleiche gilt umgekehrt: Wurde davor nicht assembliert,
  dann wird danach assembliert.
  Es k&ouml;nnen beliebig viele $ELSE-Direktiven angegebene werden.
 <br/><br/>

 <h3>
  <a name="$endif">5.7. Assembler-Direktive <tt>$ENDIF</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$ENDIF</tt><br/>
  &nbsp;&nbsp;<tt>$ENDIF&nbsp;<i>&lt;Bezeichnung&gt;</i></tt>
 <br/><br/>
  Die <tt>$ENDIF</tt>-Direktive beendet den Abschnitt der bedingten
  Assembliuerung.
  Optional kann hinter <tt>$ENDIF</tt> ein Wort angegeben werden,
  welches eine Info f&uuml;r den Programmierer ist
  und vom Assembler ignoriert wird.
 <br/><br/>

 <h3>
  <a name="cond_example">5.8. Beispiel f&uuml;r bedingte Assemblierung</a>
 </h3>
  <tt>&nbsp;&nbsp;.db&nbsp;'Dieses Programm wurde mit'</tt>&#10;<br/>
  <tt>$IFDEF&nbsp;__JTCEMU__</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.db&nbsp;' dem JTCEMU-'</tt>&#10;<br/>
  <tt>$ELSE</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.db&nbsp;' einem unbekannten '</tt>&#10;<br/>
  <tt>$ENDIF</tt>&#10;<br/>
  <tt>&nbsp;&nbsp;.db&nbsp;'Assembler assembliert.'</tt>&#10;<br/>
 <br/>
  <b>Hinweis:</b> Die Assembler-Direktiven f&uuml;r
  bedingte Assemblierung k&ouml;nnen in sich geschachtelt werden
  und sind weitgehend kompatibel zu denen in [1].
 <br/><br/>

 <h3>
  <a name="$even">5.9. Assembler-Direktive <tt>$EVEN</tt></a>
 </h3>
  Syntax:
 <br/>
  &nbsp;&nbsp;<tt>$EVEN</tt>
 <br/><br/>
  Die <tt>$EVEN</tt>-Direktive setzt die aktuelle Adresse
  auf einen geraden Wert.
  Dazu wird ggf. ein %FF-Byte eingef&uuml;gt.
 <br/><br/>
  Die Wirkung der <tt>$EVEN</tt>-Direktive kann man auch mit dem
  Pseudobefehl <a href="asmsyntax.htm#.align"><tt>.align</tt></a>
  erreichen.
 <br/><br/>


 <h2><a name="placebo">6. Assembler-Direktiven und Pseudobefehle ohne Wirkung</a></h2>
  Nachfolgende Assembler-Direktiven und Pseudobefehle werden aus Gr&uuml;nden
  der Kompatibilit&auml;t zu anderen Z8-Assemblern verstanden,
  entfalten in diesem Assembler jedoch keine Wirkung.
  Diese Befehle einschlie&szlig;lich eventueller Argumente
  werden einfach &uuml;berlesen:
 <br/><br>
  <table border="1">
   <tr>
    <th nowrap="nowrap">Befehl</th>
    <th>Synonyme</th>
   </tr>
   <tr>
    <td valign="top"><tt>.assume</tt></td>
    <td valign="top"><tt>ASSUME</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.globals</tt></td>
    <td valign="top"><tt>GLOBALS</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.listing</tt></td>
    <td valign="top"><tt>LISTING</tt><br/><tt>$LISTING</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.listoff</tt></td>
    <td valign="top"><tt>LISTOFF</tt><br/><tt>$LISTOFF</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.liston</tt></td>
    <td valign="top"><tt>LISTON</tt><br/><tt>$LISTON</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.page</tt></td>
    <td valign="top"><tt>PAGE</tt><br/><tt>$PAGE</tt></td>
   </tr>
   <tr>
    <td valign="top"><tt>.newpage</tt></td>
    <td valign="top"><tt>NEWPAGE</tt><br/><tt>$NEWPAGE</tt></td>
   </tr>
  </table>
 <br/>


 <h2><a name="literature">7. Literatur</a></a>
  <table border="0">
   <tr>
    <td valign="top">[1]</td>
    <td valign="top">
     Zilog Inc.: Z8 PLZ/ASM Assembly Language Programming Manual,
    Campbell, California, USA, December 1980
    </td>
   </tr>
  </table>
</body>
</html>
